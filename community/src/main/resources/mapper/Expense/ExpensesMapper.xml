<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.ExpensesMapper">

    <resultMap type="Expenses" id="ExpensesResult">
        <result property="expenseID"    column="expenseID"    />
        <result property="expenseType"    column="expenseType"    />
        <result property="amount"    column="amount"    />
        <result property="paymentStatus"    column="paymentStatus"    />
        <result property="createdAt"    column="createdAt"    />
        <result property="updatedAt"    column="updatedAt"    />
        <result property="userId"    column="user_id"    />
    </resultMap>

    <sql id="selectExpensesVo">
        select expenseID, expenseType, amount, paymentStatus, createdAt, updatedAt, user_id from expenses
    </sql>

    <select id="selectExpensesList" parameterType="Expenses" resultMap="ExpensesResult">
        <include refid="selectExpensesVo"/>
        <where>
            <if test="expenseType != null  and expenseType != ''"> and expenseType = #{expenseType}</if>
            <if test="amount != null "> and amount = #{amount}</if>
            <if test="paymentStatus != null  and paymentStatus != ''"> and paymentStatus = #{paymentStatus}</if>
            <if test="createdAt != null "> and createdAt = #{createdAt}</if>
            <if test="updatedAt != null "> and updatedAt = #{updatedAt}</if>
            <if test="userId != null "> and user_id = #{userId}</if>
        </where>
    </select>

    <select id="selectExpensesByExpenseID" parameterType="Long" resultMap="ExpensesResult">
        <include refid="selectExpensesVo"/>
        where expenseID = #{expenseID}
    </select>

    <insert id="insertExpenses" parameterType="Expenses" useGeneratedKeys="true" keyProperty="expenseID">
        insert into expenses
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="expenseType != null and expenseType != ''">expenseType,</if>
            <if test="amount != null">amount,</if>
            <if test="paymentStatus != null">paymentStatus,</if>
            <if test="createdAt != null">createdAt,</if>
            <if test="updatedAt != null">updatedAt,</if>
            <if test="userId != null">user_id,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="expenseType != null and expenseType != ''">#{expenseType},</if>
            <if test="amount != null">#{amount},</if>
            <if test="paymentStatus != null">#{paymentStatus},</if>
            <if test="createdAt != null">#{createdAt},</if>
            <if test="updatedAt != null">#{updatedAt},</if>
            <if test="userId != null">#{userId},</if>
        </trim>
    </insert>

    <update id="updateExpenses" parameterType="Expenses">
        update expenses
        <trim prefix="SET" suffixOverrides=",">
            <if test="expenseType != null and expenseType != ''">expenseType = #{expenseType},</if>
            <if test="amount != null">amount = #{amount},</if>
            <if test="paymentStatus != null">paymentStatus = #{paymentStatus},</if>
            <if test="createdAt != null">createdAt = #{createdAt},</if>
            <if test="updatedAt != null">updatedAt = #{updatedAt},</if>
            <if test="userId != null">user_id = #{userId},</if>
        </trim>
        where expenseID = #{expenseID}
    </update>

    <delete id="deleteExpensesByExpenseID" parameterType="Long">
        delete from expenses where expenseID = #{expenseID}
    </delete>

    <delete id="deleteExpensesByExpenseIDs" parameterType="String">
        delete from expenses where expenseID in
        <foreach item="expenseID" collection="array" open="(" separator="," close=")">
            #{expenseID}
        </foreach>
    </delete>
</mapper>